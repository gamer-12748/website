[{"P:\\website\\website\\src\\index.js":"1","P:\\website\\website\\src\\App.js":"2","P:\\website\\website\\src\\Component\\Aihome.js":"3","P:\\website\\website\\src\\Component\\NavigationBar.js":"4","P:\\website\\website\\src\\Component\\pages\\CyborticsHumanoid.js":"5","P:\\website\\website\\src\\Component\\pages\\GithubRepositories.js":"6","P:\\website\\website\\src\\Component\\pages\\Home.js":"7","P:\\website\\website\\src\\Component\\pages\\AboutMe.js":"8","P:\\website\\website\\src\\Component\\Button.js":"9","P:\\website\\website\\src\\Component\\pages\\gitcard.js":"10","P:\\website\\website\\src\\Component\\HeroSection.js":"11","P:\\website\\website\\src\\Component\\Cards.js":"12","P:\\website\\website\\src\\Component\\Footer.js":"13","P:\\website\\website\\src\\Component\\Carditem.js":"14","P:\\website\\website\\src\\Component\\404.js":"15","P:\\website\\website\\src\\firebase.js":"16","P:\\website\\website\\src\\bad-words\\badwords.js":"17","P:\\website\\website\\src\\Component\\pages\\Testimonials.js":"18","P:\\website\\website\\src\\Component\\pages\\dsm.js":"19"},{"size":483,"mtime":1606740427022,"results":"20","hashOfConfig":"21"},{"size":1692,"mtime":1616674505310,"results":"22","hashOfConfig":"21"},{"size":208,"mtime":1606818824487,"results":"23","hashOfConfig":"21"},{"size":3254,"mtime":1607253729654,"results":"24","hashOfConfig":"21"},{"size":4874,"mtime":1611387936928,"results":"25","hashOfConfig":"21"},{"size":1311,"mtime":1606973327423,"results":"26","hashOfConfig":"21"},{"size":260,"mtime":1607064276817,"results":"27","hashOfConfig":"21"},{"size":3461,"mtime":1621865626242,"results":"28","hashOfConfig":"21"},{"size":943,"mtime":1606902889122,"results":"29","hashOfConfig":"21"},{"size":284,"mtime":1606902838634,"results":"30","hashOfConfig":"21"},{"size":836,"mtime":1606985973468,"results":"31","hashOfConfig":"21"},{"size":1067,"mtime":1606981158809,"results":"32","hashOfConfig":"21"},{"size":6952,"mtime":1607237794337,"results":"33","hashOfConfig":"21"},{"size":664,"mtime":1606902995251,"results":"34","hashOfConfig":"21"},{"size":502,"mtime":1607067658655,"results":"35","hashOfConfig":"21"},{"size":558,"mtime":1607271909345,"results":"36","hashOfConfig":"21"},{"size":339,"mtime":1607271902411,"results":"37","hashOfConfig":"21"},{"size":4523,"mtime":1610442169783,"results":"38","hashOfConfig":"21"},{"size":15249,"mtime":1610535040260,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"1bxcx5q",{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"42"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"42"},"P:\\website\\website\\src\\index.js",[],["81","82"],"P:\\website\\website\\src\\App.js",[],"P:\\website\\website\\src\\Component\\Aihome.js",[],"P:\\website\\website\\src\\Component\\NavigationBar.js",[],"P:\\website\\website\\src\\Component\\pages\\CyborticsHumanoid.js",[],"P:\\website\\website\\src\\Component\\pages\\GithubRepositories.js",[],"P:\\website\\website\\src\\Component\\pages\\Home.js",[],"P:\\website\\website\\src\\Component\\pages\\AboutMe.js",[],"P:\\website\\website\\src\\Component\\Button.js",[],"P:\\website\\website\\src\\Component\\pages\\gitcard.js",[],"P:\\website\\website\\src\\Component\\HeroSection.js",[],"P:\\website\\website\\src\\Component\\Cards.js",[],"P:\\website\\website\\src\\Component\\Footer.js",[],"P:\\website\\website\\src\\Component\\Carditem.js",[],"P:\\website\\website\\src\\Component\\404.js",[],"P:\\website\\website\\src\\firebase.js",[],"P:\\website\\website\\src\\bad-words\\badwords.js",[],"P:\\website\\website\\src\\Component\\pages\\Testimonials.js",["83"],"import React, { useState, useEffect } from 'react'\r\nimport { isProfane } from '../../bad-words/badwords'\r\n//import { Button } from '../Button';\r\nimport firebase from '../../firebase'\r\nimport './testimonial.css'\r\n\r\nvar alldoc = []\r\nfunction Testimonials() {\r\n  const [name, setname] = useState('')\r\n  const [Testimonial, setTestimonial] = useState('')\r\n  const [successem, Setsuccessem] = useState(false)\r\n  const [Errorr, SetErrorr] = useState('')\r\n  const [DisplayError, SetDisplayError] = useState(false)\r\n  const testimonyread = firebase.firestore().collection('testimonies')\r\n  const [condi, setcondi] = useState(false)\r\n  const TestimonialInputHandler = (e) => {\r\n    SetDisplayError(false)\r\n    SetErrorr('')\r\n    setTestimonial(e.target.value)\r\n  }\r\n  const NameInputHandler = (e) => {\r\n    SetDisplayError(false)\r\n    SetErrorr('')\r\n    setname(e.target.value)\r\n  }\r\n  async function handleTestimonySubmit() {\r\n    SetDisplayError(false)\r\n    SetErrorr('')\r\n    const snaapshot = await testimonyread.where('name', '==', name).get()\r\n    if (isProfane(name).length > 0) {\r\n      SetDisplayError(true)\r\n      SetErrorr(\r\n        'This name \"' +\r\n          String(name) +\r\n          '\" has been identified as profane ,if this is a mistake contact-me!!',\r\n      )\r\n    } else {\r\n      if (isProfane(Testimonial).length > 0) {\r\n        SetDisplayError(true)\r\n        SetErrorr(\r\n          'This testimonial word \"' +\r\n            String(isProfane(Testimonial)) +\r\n            '\" has been identified as profane ,if this is a mistake contact-me!!',\r\n        )\r\n      } else {\r\n        if (Testimonial.length > 10 || name.length> 5) {\r\n          if (snaapshot.empty === true) {\r\n            testimonyread.add({\r\n              name: name,\r\n              testimony: Testimonial,\r\n            })\r\n            Setsuccessem(true)\r\n          } else {\r\n            SetDisplayError(true)\r\n            SetErrorr(\r\n              'This name has alread added an testimony, if this is a mistake contact-me!!',\r\n            )\r\n          }\r\n        } else {\r\n          SetDisplayError(true)\r\n          SetErrorr(\r\n            'Your name or testimony is too short, please write testimony or name that is longer than a single word.',\r\n          )\r\n        }\r\n      }\r\n    }\r\n  }\r\n  async function Gettestimon() {\r\n    alldoc = []\r\n    const snapshot = await testimonyread.where('testimony', '!=', null).get()\r\n    if (!snapshot.empty) {\r\n      snapshot.forEach((doc) => {\r\n        alldoc.push(doc.data())\r\n      })\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    async function getTok() {\r\n      await Gettestimon();\r\n      alldoc.map((forget) => console.log(forget.name));\r\n      setcondi(true);\r\n      // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }\r\n    getTok()\r\n  }, [condi])\r\n  return (\r\n    <>\r\n      <h1 className=\"testimonials\">Testimonies</h1>\r\n      {condi ? (\r\n        alldoc.map((forget, index) => (\r\n          <h2 className=\"decide\">\r\n            {index + 1}. \"{forget.name}\" say's, \"{forget.testimony}\"\r\n          </h2>\r\n        ))\r\n      ) : (\r\n        <p>Getting them Please wait</p>\r\n      )}\r\n      <hr />\r\n      <div className=\"testimonials-text\">\r\n        <h1>\r\n          Enter your Testimonials below, pending automatic moderation they will\r\n          be added.\r\n        </h1>\r\n        {successem ? (\r\n          <>\r\n            <h2>\r\n              Testimonial \"{String(Testimonial)}\" by \"{String(name)}\" has been\r\n              Moderated and added, thank you for sharing, (if spam will be\r\n              deleted with 24 hours)\r\n            </h2>\r\n          </>\r\n        ) : (\r\n          <div className=\"temon\">\r\n            <input\r\n              className=\"temoninput\"\r\n              type=\"text\"\r\n              placeholder=\"Your Full Name\"\r\n              id=\"nametext\"\r\n              onChange={NameInputHandler}\r\n            />\r\n            <input\r\n              className=\"temoninput\"\r\n              type=\"text\"\r\n              placeholder=\"Your Testimonial\"\r\n              id=\"testimonialtext\"\r\n              onChange={TestimonialInputHandler}\r\n            />\r\n            <button\r\n              className=\"mybtn\"\r\n              type=\"button\"\r\n              onClick={() => handleTestimonySubmit()}\r\n            >\r\n              Submit Testimonial\r\n            </button>\r\n\r\n            {DisplayError ? (\r\n              <p style={{ color: '#f44a1f' }}>{Errorr}</p>\r\n            ) : (\r\n              <></>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Testimonials\r\n","P:\\website\\website\\src\\Component\\pages\\dsm.js",["84"],"import React, { useState, useEffect } from 'react'\r\nimport './dsm.css'\r\nconst SpeechRecognition =\r\n  window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst mic = new SpeechRecognition()\r\n\r\nmic.continuous = true\r\nmic.interimResults = true\r\nmic.lang = 'en-US'\r\n\r\nfunction Dsm() {\r\n  const [isListening, setIsListening] = useState(false)\r\n  const [note, setNote] = useState('')\r\n  const [waitStart, setWaitStart] = useState(true)\r\n\r\n  //room state\r\n  const [roomLight, setRoomLight] = useState(false)\r\n  const [curtain, setCurtain] = useState(false)\r\n  const [ac, SetAc] = useState(false)\r\n  const [heater, SetHeater] = useState(false)\r\n  const [roomWindow, setRoomWindow] = useState(false)\r\n  const [roomFan, setRoomFan] = useState(false)\r\n  const [roomDoor, setRoomDoor] = useState(false)\r\n  const [tv, setTv] = useState(false)\r\n  const [pc, setPc] = useState(false)\r\n\r\n  //kitchen state\r\n  const [kitchenLight, setKitchenLight] = useState(false)\r\n  const [kitchenWindow, setKitchenWindow] = useState(false)\r\n  const [kitchenFan, setKitchenFan] = useState(false)\r\n  const [kitchenDoor, setKitchenDoor] = useState(false)\r\n  const [KitchenExhaust, setKitchenExhaust] = useState(false)\r\n\r\n  //bathroom state\r\n  const [bathroomLight, setBathroomLight] = useState(false)\r\n  const [bathroomFan, setBathroomFan] = useState(false)\r\n  const [bathroomDoor, setBathroomDoor] = useState(false)\r\n  const [bathroomExhaust, setBathroomExhaust] = useState(false)\r\n\r\n  useEffect(() => {\r\n    handleListen()\r\n  }, [isListening])\r\n\r\n  const start = () => {\r\n    setWaitStart(true)\r\n    mic.stop()\r\n    setTimeout(function () {\r\n      mic.start()\r\n      mic.onstart = function () {\r\n        setWaitStart(false)\r\n      }\r\n    }, 1000)\r\n  }\r\n  const handleListen = () => {\r\n    if (isListening) {\r\n      start()\r\n    } else {\r\n      mic.stop()\r\n      setWaitStart(true)\r\n    }\r\n\r\n    mic.onresult = (event) => {\r\n      const transcript = Array.from(event.results)\r\n        .map((result) => result[0])\r\n        .map((result) => result.transcript)\r\n        .join('')\r\n      setNote(transcript)\r\n      mic.onerror = (event) => {\r\n        alert(\r\n          'error occured, likely caused by an older version of chrome.\\n if you are on another browser move to chrome please.',\r\n        )\r\n        start()\r\n      }\r\n    }\r\n  }\r\n  const changelisten = () => {\r\n    setIsListening((prevState) => !prevState)\r\n  }\r\n  const handleSaveNote = () => {\r\n    setTimeout(function () {\r\n      var currentcommand = String(note)\r\n      currentcommand = currentcommand.toLowerCase()\r\n      setIsListening(false)\r\n      if (\r\n        String(currentcommand).includes('turn on') ||\r\n        String(currentcommand).includes('open')\r\n      ) {\r\n        currentcommand = String(currentcommand).replace('turn on', '')\r\n        currentcommand = String(currentcommand).replace('open', '')\r\n        onswitch(currentcommand)\r\n        setNote('')\r\n      } else if (\r\n        String(currentcommand).includes('turn off') ||\r\n        String(currentcommand).includes('close')\r\n      ) {\r\n        currentcommand = String(currentcommand).replace('turn off', '')\r\n        currentcommand = String(currentcommand).replace('close', '')\r\n        offswitch(currentcommand)\r\n        setNote('')\r\n      } else {\r\n        setNote(\r\n          'your command is malformed. please give proper commands. as in \"turn on/turn off/open/close/ + component(ex. light)+ in the room/kitchen/bathroom\"',\r\n        )\r\n      }\r\n    }, 1000)\r\n  }\r\n  function onswitch(currentcommand) {\r\n    if (currentcommand.includes('bathroom')) {\r\n      if (currentcommand.includes('light')) {\r\n        setBathroomLight(true)\r\n      }\r\n      if (currentcommand.includes('exhaust')) {\r\n        setBathroomExhaust(true)\r\n      }\r\n      if (currentcommand.includes('fan')) {\r\n        setBathroomFan(true)\r\n      }\r\n      if (currentcommand.includes('door')) {\r\n        setBathroomDoor(true)\r\n      }\r\n    } else if (currentcommand.includes('room' || 'Room' || 'Rooms')) {\r\n      console.log(currentcommand)\r\n      if (currentcommand.includes('curtain')) {\r\n        setCurtain(true)\r\n      }\r\n      if (currentcommand.includes('ac' || 'AC' || 'Ac')) {\r\n        SetAc(true)\r\n      }\r\n      if (currentcommand.includes('light')) {\r\n        setRoomLight(true)\r\n      }\r\n      if (currentcommand.includes('heater')) {\r\n        SetHeater(true)\r\n      }\r\n      if (currentcommand.includes('window')) {\r\n        setRoomWindow(true)\r\n      }\r\n      if (currentcommand.includes('fan')) {\r\n        setRoomFan(true)\r\n      }\r\n      if (currentcommand.includes('door')) {\r\n        setRoomDoor(true)\r\n      }\r\n      if (currentcommand.includes('tv')) {\r\n        setTv(true)\r\n      }\r\n      if (currentcommand.includes('pc')) {\r\n        setPc(true)\r\n      }\r\n    } else if (currentcommand.includes('kitchen')) {\r\n      if (currentcommand.includes('light')) {\r\n        setKitchenLight(true)\r\n      }\r\n      if (currentcommand.includes('exhaust')) {\r\n        setKitchenExhaust(true)\r\n      }\r\n      if (currentcommand.includes('window')) {\r\n        setKitchenWindow(true)\r\n      }\r\n      if (currentcommand.includes('fan')) {\r\n        setKitchenFan(true)\r\n      }\r\n      if (currentcommand.includes('door')) {\r\n        setKitchenDoor(true)\r\n      }\r\n    } else {\r\n      setNote(\r\n        'your command is malformed. please give proper commands. as in \"turn on/turn off/open/close/ + component(ex. light)+ in the room/kitchen/bathroom\"',\r\n      )\r\n    }\r\n  }\r\n  function offswitch(currentcommand) {\r\n    if (currentcommand.includes('bathroom')) {\r\n      if (currentcommand.includes('light')) {\r\n        setBathroomLight(false)\r\n      }\r\n      if (currentcommand.includes('exhaust')) {\r\n        setBathroomExhaust(false)\r\n      }\r\n      if (currentcommand.includes('fan')) {\r\n        setBathroomFan(false)\r\n      }\r\n      if (currentcommand.includes('door')) {\r\n        setBathroomDoor(false)\r\n      }\r\n    } else if (currentcommand.includes('room' || 'Room' || 'Rooms')) {\r\n      console.log(currentcommand)\r\n      if (currentcommand.includes('curtain')) {\r\n        setCurtain(false)\r\n      }\r\n      if (currentcommand.includes('ac' || 'AC' || 'Ac')) {\r\n        SetAc(false)\r\n      }\r\n      if (currentcommand.includes('light')) {\r\n        setRoomLight(false)\r\n      }\r\n      if (currentcommand.includes('heater')) {\r\n        SetHeater(false)\r\n      }\r\n      if (currentcommand.includes('window')) {\r\n        setRoomWindow(false)\r\n      }\r\n      if (currentcommand.includes('fan')) {\r\n        setRoomFan(false)\r\n      }\r\n      if (currentcommand.includes('door')) {\r\n        setRoomDoor(false)\r\n      }\r\n      if (currentcommand.includes('tv')) {\r\n        setTv(false)\r\n      }\r\n      if (currentcommand.includes('pc')) {\r\n        setPc(false)\r\n      }\r\n    } else if (currentcommand.includes('kitchen')) {\r\n      if (currentcommand.includes('light')) {\r\n        setKitchenLight(false)\r\n      }\r\n      if (currentcommand.includes('exhaust')) {\r\n        setKitchenExhaust(false)\r\n      }\r\n      if (currentcommand.includes('window')) {\r\n        setKitchenWindow(false)\r\n      }\r\n      if (currentcommand.includes('fan')) {\r\n        setKitchenFan(false)\r\n      }\r\n      if (currentcommand.includes('door')) {\r\n        setKitchenDoor(false)\r\n      }\r\n    } else {\r\n      setNote(\r\n        'your command is malformed. please give proper commands. as in \"turn on/turn off/open/close/ + component(ex. light)+ in the room/kitchen/bathroom\"',\r\n      )\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h1>Your Personal Home Assistant</h1>\r\n      <div className=\"container\">\r\n        <div className=\"box\">\r\n          <h2>Give Command</h2>\r\n          {waitStart ? <span>🛑</span> : <span>🎙️</span>}\r\n          <button className=\"btttn\" onClick={handleSaveNote} disabled={!note}>\r\n            Analyze command\r\n          </button>\r\n          <button className=\"btttn\" onClick={() => changelisten()}>\r\n            Start Listening/Stop Listening\r\n          </button>\r\n          <p>{note}</p>\r\n        </div>\r\n        <div className=\"box\">\r\n          <h2>Home State</h2>\r\n          <h3>Room</h3>\r\n          <p>\r\n            Light's💡 ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: roomLight ? '#00e600' : '' }}\r\n              onClick={() => setRoomLight((prevState) => !prevState)}\r\n            >\r\n              {roomLight ? <span>Lights on</span> : <span>Lights off</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            Curtain ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: curtain ? '#00e600' : '' }}\r\n              onClick={() => setCurtain((prevState) => !prevState)}\r\n            >\r\n              {curtain ? (\r\n                <span>curtain's open</span>\r\n              ) : (\r\n                <span>curtain's closed</span>\r\n              )}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            ac ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: ac ? '#00e600' : '' }}\r\n              onClick={() => SetAc((prevState) => !prevState)}\r\n            >\r\n              {ac ? <span>AC on</span> : <span>Ac off</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            heater ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: heater ? '#00e600' : '' }}\r\n              onClick={() => SetHeater((prevState) => !prevState)}\r\n            >\r\n              {heater ? <span>Heaters on</span> : <span>Heaters off</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            window ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: roomWindow ? '#00e600' : '' }}\r\n              onClick={() => setRoomWindow((prevState) => !prevState)}\r\n            >\r\n              {roomWindow ? (\r\n                <span>windows open</span>\r\n              ) : (\r\n                <span>Windows closed</span>\r\n              )}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            fan ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: roomFan ? '#00e600' : '' }}\r\n              onClick={() => setRoomFan((prevState) => !prevState)}\r\n            >\r\n              {roomFan ? <span>fan on</span> : <span>fan off</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            door🚪 ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: roomDoor ? '#00e600' : '' }}\r\n              onClick={() => setRoomDoor((prevState) => !prevState)}\r\n            >\r\n              {roomDoor ? <span>door open</span> : <span>door closed</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            tv📺 ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: tv ? '#00e600' : '' }}\r\n              onClick={() => setTv((prevState) => !prevState)}\r\n            >\r\n              {tv ? <span>tv's on</span> : <span>tv's off</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            pc💻 ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: pc ? '#00e600' : '' }}\r\n              onClick={() => setPc((prevState) => !prevState)}\r\n            >\r\n              {pc ? <span>pc's on</span> : <span>pc's off</span>}\r\n            </button>\r\n          </p>\r\n\r\n          <h3>kitchen</h3>\r\n          <p>\r\n            Light's💡 ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: kitchenLight ? '#00e600' : '' }}\r\n              onClick={() => setKitchenLight((prevState) => !prevState)}\r\n            >\r\n              {kitchenLight ? <span>Lights on</span> : <span>Lights off</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            window ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: kitchenWindow ? '#00e600' : '' }}\r\n              onClick={() => setKitchenWindow((prevState) => !prevState)}\r\n            >\r\n              {kitchenWindow ? (\r\n                <span>windows open</span>\r\n              ) : (\r\n                <span>Windows closed</span>\r\n              )}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            fan ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: kitchenFan ? '#00e600' : '' }}\r\n              onClick={() => setKitchenFan((prevState) => !prevState)}\r\n            >\r\n              {kitchenFan ? <span>fan on</span> : <span>fan off</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            door🚪 ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: kitchenDoor ? '#00e600' : '' }}\r\n              onClick={() => setKitchenDoor((prevState) => !prevState)}\r\n            >\r\n              {kitchenDoor ? <span>door open</span> : <span>door closed</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            exhaust ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: KitchenExhaust ? '#00e600' : '' }}\r\n              onClick={() => setKitchenExhaust((prevState) => !prevState)}\r\n            >\r\n              {KitchenExhaust ? (\r\n                <span>exhaust open</span>\r\n              ) : (\r\n                <span>exhaust closed</span>\r\n              )}\r\n            </button>\r\n          </p>\r\n\r\n          <h3>Bathroom</h3>\r\n          <p>\r\n            Light's💡 ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: bathroomLight ? '#00e600' : '' }}\r\n              onClick={() => setBathroomLight((prevState) => !prevState)}\r\n            >\r\n              {bathroomLight ? <span>Lights on</span> : <span>Lights off</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            fan ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: bathroomFan ? '#00e600' : '' }}\r\n              onClick={() => setBathroomFan((prevState) => !prevState)}\r\n            >\r\n              {bathroomFan ? <span>fan on</span> : <span>fan off</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            door🚪 ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: bathroomDoor ? '#00e600' : '' }}\r\n              onClick={() => setBathroomDoor((prevState) => !prevState)}\r\n            >\r\n              {bathroomDoor ? <span>door open</span> : <span>door closed</span>}\r\n            </button>\r\n          </p>\r\n          <p>\r\n            exhaust ={' '}\r\n            <button\r\n              className=\"btttn\"\r\n              style={{ backgroundColor: bathroomExhaust ? '#00e600' : '' }}\r\n\r\n              onClick={() => setBathroomExhaust((prevState) => !prevState)}\r\n            >\r\n              {bathroomExhaust ? (\r\n                <span>exhaust open</span>\r\n              ) : (\r\n                <span>exhaust closed</span>\r\n              )}\r\n            </button>\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Dsm\r\n",{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":85,"column":6,"nodeType":"91","endLine":85,"endColumn":13,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":42,"column":6,"nodeType":"91","endLine":42,"endColumn":19,"suggestions":"94"},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'Gettestimon'. Either include it or remove the dependency array.","ArrayExpression",["97"],"React Hook useEffect has a missing dependency: 'handleListen'. Either include it or remove the dependency array.",["98"],"no-global-assign","no-unsafe-negation",{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},"Update the dependencies array to be: [Gettestimon, condi]",{"range":"103","text":"104"},"Update the dependencies array to be: [handleListen, isListening]",{"range":"105","text":"106"},[2760,2767],"[Gettestimon, condi]",[1506,1519],"[handleListen, isListening]"]